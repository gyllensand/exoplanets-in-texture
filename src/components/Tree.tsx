/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: MaximilianY. (https://sketchfab.com/MaximilianY.)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/tree-tall-green-light-65af811f1ca346b3b5836351b847ca77
title: Tree Tall Green Light
*/

import * as THREE from "three";
import React, {
  useRef,
  useMemo,
  useContext,
  createContext,
  RefObject,
  useEffect,
} from "react";
import { useGLTF, Merged, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { Vector3, Mesh, SphereBufferGeometry, Group } from "three";
import { WORLD_SIZE } from "../Scene";
import { getRandomNumber, pickRandomIntFromInterval } from "../utils";

interface Tree {
  v3: Vector3;
  colorLeaves?: string;
  colorStem?: string;
}

type GLTFResult = GLTF & {
  nodes: {
    Object_7: THREE.SkinnedMesh;
    Object_8: THREE.SkinnedMesh;
    _rootJoint: THREE.Bone;
  };
  materials: {
    Tree_green_light: THREE.MeshStandardMaterial;
    wood3: THREE.MeshStandardMaterial;
  };
};

type ActionName = "Main";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

// @ts-ignore
const context = createContext(undefined);
// @ts-ignore
export function TreeInstances({ children, ...props }) {
  const { nodes } = useGLTF("/models/Tree/scene-transformed.glb") as GLTFResult;
  const instances = useMemo(
    () => ({
      Object: nodes.Object_7,
      Object1: nodes.Object_8,
    }),
    [nodes]
  );
  return (
    <Merged meshes={instances} {...props}>
      {/*
              // @ts-ignore */}
      {(instances) => (
        <context.Provider value={instances} children={children} />
      )}
    </Merged>
  );
}

export function Tree({
  data,
  earthRef,
}: {
  data: Tree;
  earthRef?: RefObject<Mesh<SphereBufferGeometry>>;
}) {
  const instances = useContext(context);
  const groupRef = useRef<Group>();
  const scale = useMemo(() => pickRandomIntFromInterval(5, 10) * 0.00002, []);
  const { nodes, animations } = useGLTF(
    "/models/Tree/scene-transformed.glb"
  ) as GLTFResult;
  // @ts-ignore
  // const { actions } = useAnimations<GLTFActions>(animations, groupRef);

  useEffect(() => {
    if (!earthRef?.current || !groupRef?.current) {
      return;
    }

    groupRef.current.position.setFromSphericalCoords(
      WORLD_SIZE + 0.005,
      data.v3.y,
      data.v3.x
    );
    groupRef.current.lookAt(earthRef.current.position);
  }, [earthRef, data.v3]);

  // useEffect(() => {
  //   //Â @ts-ignore
  //   actions?.Main?.play();
  // }, [actions]);

  const leafColor = data.colorLeaves ? { color: data.colorLeaves } : {};
  const stemColor = data.colorStem ? { color: data.colorStem } : {};

  return (
    <group ref={groupRef}>
      <group rotation={[-Math.PI, 0, getRandomNumber() * 5]}>
        <group scale={scale} dispose={null}>
          <group name="Sketchfab_Scene">
            <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
              <group
                name="29e7ac2c7441442f8574882abfdfef48fbx"
                rotation={[Math.PI / 2, 0, 0]}
              >
                <group name="Object_2">
                  <group name="RootNode">
                    <group
                      name="Tree_T_green_light_1"
                      rotation={[Math.PI / 2, 0, 0]}
                    >
                      <group name="Object_5">
                        <primitive object={nodes._rootJoint} />
                        {/*
                        // @ts-ignore */}
                        <instances.Object name="Object_7" {...leafColor} />
                        {/*
                        // @ts-ignore */}
                        <instances.Object1 name="Object_8" {...stemColor} />
                      </group>
                    </group>
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/Tree/scene-transformed.glb");
